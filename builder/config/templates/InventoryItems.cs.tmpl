using System.Collections.Generic;
using System;

namespace TPV.Data { 

  public static class PlantInfoHelper {

    public static Dictionary<string, List<int>> plantGrowthStages = new Dictionary<string, List<int>>() {
      {{- range .Items}}{{ if .GrowthStages}}
      { "{{md5 .Key}}", new List<int>() {
        {{ range $i, $s := .GrowthStages}}{{$s}}, {{end}}
      } },
      {{- end}}{{end}}
    };
  };

  public static class InventoryItemIDHelper {

    private static Dictionary<string, int> hashToIdMap = new Dictionary<string, int>() {
      {{- range $i, $item := .Items }}
      { "{{md5 .Key}}", {{$i}} },
      {{- end }}
    };

    private static Dictionary<int, string> idToHashMap = new Dictionary<int, string>() { 
      {{- range $i, $item := .Items }}
      { {{$i}}, "{{md5 .Key}}" },
      {{- end }}
    };

    public static InventoryItemType GetEnum(string id) {
      return (InventoryItemType)GetIntFromHash(id);
    }

    public static InventoryItemType GetEnum(int id) {
      return (InventoryItemType)id;
    }

    public static InventoryItemType GetEnumFromName(string type) {
      return (InventoryItemType)Enum.Parse(typeof(InventoryItemType), type);
    }

    public static string GetHash(InventoryItemType type) {
      return GetHashFromInt((int)type);
    }

    public static string GetHashFromInt(int id) {
      return idToHashMap[id];
    }

    public static int GetIntFromHash(string id) {
      return hashToIdMap[id];
    }
  }

  public enum InventoryItemType {
    {{- range $i, $item := .Items }}
    {{.Key}} = {{$i}},
    {{- end }}
  }
}