using System.Collections.Generic;
using System;

namespace TPV.Data { 

  public static class PlantInfoHelper {

    public static Dictionary<string, List<int>> plantGrowthStages = new Dictionary<string, List<int>>() {
<% var i = 0; for(var itemKey in items) { var item = items[itemKey]; if (item.growthStages) { -%>
      { "<%= item.itemKeyMd5 %>", new List<int>() { <% for(var j = 0; j < item.growthStages.length; j++) { -%><%= item.growthStages[j] %>, <% } %>} }, 
<% i++; } } -%>
    };
  };

  public static class InventoryItemIDHelper {

    private static Dictionary<string, int> hashToIdMap = new Dictionary<string, int>() {
<% var i = 0; for(var itemKey in items) { var item = items[itemKey] -%>
      { "<%= item.itemKeyMd5 %>", <%= i %> },
<% i++; } -%>
    };

    private static Dictionary<int, string> idToHashMap = new Dictionary<int, string>() { 
<% var i = 0; for(var itemKey in items) { var item = items[itemKey] -%>
      { <%= i %>, "<%= item.itemKeyMd5 %>" },
<% i++; } -%>
    };

    public static InventoryItemType GetEnum(string id) {
      return (InventoryItemType)GetIntFromHash(id);
    }

    public static InventoryItemType GetEnum(int id) {
      return (InventoryItemType)id;
    }

    public static InventoryItemType GetEnumFromName(string type) {
      return (InventoryItemType)Enum.Parse(typeof(InventoryItemType), type);
    }

    public static string GetHash(InventoryItemType type) {
      return GetHashFromInt((int)type);
    }

    public static string GetHashFromInt(int id) {
      return idToHashMap[id];
    }

    public static int GetIntFromHash(string id) {
      return hashToIdMap[id];
    }
  }

  public enum InventoryItemType {
<% var i = 0; for(var itemKey in items) { var item = items[itemKey] -%>
    <%= itemKey %> = <%= i %>,
<% i++; } -%>
  }
}