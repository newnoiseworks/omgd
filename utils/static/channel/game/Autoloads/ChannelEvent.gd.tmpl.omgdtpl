extends Node

enum {
{{- range $i, $event := .{* .profile.omgd.channel_name *}_events }}
  {{upperSnake $event}} = {{ $i }},
{{- end }}
}

{{ range $i, $event := .{* .profile.omgd.channel_name *}_events }}
signal {{$event}}(state, presence)
{{ end }}

var signal_map = {
{{- range $i, $event := .{* .profile.omgd.channel_name *}_events }}
	{{upperSnake $event}}: "{{ $event }}",
{{- end }}
}


func handle_match_state_update(state: NakamaRTAPI.MatchData):
	if state.presence != null && state.presence.user_id == SessionManager.session.user_id:
		return

	match state.op_code:
		{{- range $i, $event := .{* .profile.omgd.channel_name *}_events }}
		{{upperSnake $event}}:
			emit_signal("{{$event}}", state.data, state.presence)
		{{- else }}
		_:
			pass
		{{- end }}


func emit(op_code: int, payload: String):
	var event: String = signal_map[op_code]
	emit_signal(event, payload, {"user_id": SessionManager.session.user_id})

	if {*camel .profile.omgd.channel_name*}Manager.game_match != null:
		{*camel .profile.omgd.channel_name*}Manager.socket.send_match_state_async(
			{*camel .profile.omgd.channel_name*}Manager.game_match.match_id, op_code, payload
		)



{{ range $i, $event := .{* .profile.omgd.channel_name *}_events }}
func {{$event}}(payload):
	emit({{upperSnake $event}}, JSON.print(payload))


{{- end }}
